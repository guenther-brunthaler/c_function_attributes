Function Call Attributes
========================
Guenther Brunthaler <gb@emgenxx69lwyn5ctlr4nl64ul.local>
Version 1.1, 2020-04-29

"CFA" stands for "C Function Attributes" and is a set of conventions for naming C functions and their parameters, effectively annotating them. This attaches semantic meaning in the form of attributes to the names, for which the C language does not provide any means of declaring such attributes.

The documentation of those semantic attributes can then be removed from the documentation of the individual functions or their parameters, and can be replaced by a single copy of the CFA conventions which applies to all documented functions at once.

This document defines a particular kind of CFA, called "function call attributes".

C++ supports declarators like throw() or "mutable" which C lacks.

CFA uses a manual name-mangling scheme to encode such declarators into the function name, allowing the human reader of a source file to infer the associated semantics without a requirement to study the function's documentation for this purpose.

The mangling consist of adding a suffix "_c" (for "call attributes") to the end of the function name, being followed by a single digit encoding a combination of supported attributes.

The digit calculates as follows (start with a value of 0):

* Bit 0 (add 1 to digit value) for functions which might throw exceptions.
* Bit 1 (add 2 to digit value) for "mutably constant" member functions.
* Bit 2 (add 4 to digit value) for functions registering resources non-locally.


Functions which might throw exceptions
--------------------------------------

CFA-functions never require any error checking by the caller.

This is actually the primary point for the existence of CFA.

CFA functions are supposed to be "fire & forget"-functions: The caller just uses them and does not need to check for any errors.

There are two possibilities how to achieve this: Either because a function cannot fail, or because it will not return to its caller in case of an error.

CFA-functions with a suffix of _c1 or _c3 or _c5 or _c7 will do the latter.

These suffixes mean that there is a chance that the function might actually fail, but it throw an exception and never return to its caller in this case.

However, those suffixes also mean that the caller must ensure any resources allocated so far will be freed in the case that the called function will not return.

This is normally done by registering the resources with some resource registration framework used by the application.

Such a framework can be as primitive as storing a pointer to or a handle for the resource in a global variable.

But the exception handling mechanism triggered by the function in case of an error must know about it and make sure that all resources will be released eventually before the application finally exits.

It is still possible for such a function to return particular error codes as part of their normal operation if this is documented.

But in addition to those particular error codes, other less specific errors may also arise and will then make the function throw an exception.

For instance, a function reading a line of text from a file might return 0 if EOF has been encountered or 1 if the line has successfully been read.

Such a function will internally not just check for EOF but also for `ferror()`, and will only return to the caller if the latter check did not indicate an error.

In outdated former versions of CFA bit # 0 had exactly the opposite meaning: To mark functions which would "never fail". Which means they would not throw exceptions or return error codes.

The problem with that approach was that it was unclear whether a function without this suffix would throw exceptions, return error codes - or not.

The latter was the case for all non-CFA functions and required all CFA functions to have some prefix to be distinguished from "normal" (non-CFA) functions.

Therefore bit # 0 now marks explicit exception support, and has the added bonus of allowing to easily create names of "wrapper" functions by just adding the suffix - without also requiring a specific prefix.

For instance, instead of having mylib_strdup() being an exception-aware wrapper for strdup as part of some helper library, now strdup_c1() does the same without requiring a library-specific prefix.

This means the _c-Suffixes can be used by any function following CFA's concepts, whether they are part of some framework using the CFA conventions itself or rather part of external / third party / application-specific custom code.

Note that CFA does not define what "throwing an exception" actually means. This can be very different between programs. 'C++' programs might actually throw real 'C++'-exceptions. C-programs might call `longjmp()` or call `exit()` or `abort()` after error handling.

CFA does not care. The only important thing is that no CFA-aware function must return to its caller when an exception is thrown (and not also handled) by it.


"Mutably constant" Member Functions
-----------------------------------

CFA functions suffixed _c2 or _c3 or _c6 or _c7 promise not to change the "observable state" of the objects they operate on.

That is, they will behave as if the object pointer was a const* in cases where it is not possible to actually use const pointers.

C++ supports the "mutable" declarator to mark "external" fields which are physically part of a structure, but do not logically belong to it.

A typical application are "const" objects in an internally-linked list.

The observable internal state of the objects will not change during the lifetime of the list, but new objects may be added to the list, resulting in changes of the internal linkage-pointer fields of the "constant" objects.

Those linkage fields are hidden from the object's clients, so any changes in those fields have no effect on the client's perceived constantness of the object.

However, it is not possible to define pointers to such objects as "const" anymore, because the object's internal state actually *does* change, even though it's just the linkage pointers.

In such cases, the "mutably constant" call attribute comes handy.

It specifies that the primary object on which the function operates will not be modified in any way observable by the client much like using a "const" pointer.

However, some hidden internal fields of the object which do not effect its externally perceivable behavior might be modified, disallowing to actually use a "const" pointer.

This call attribute also implies that the first function argument must be a non-"const" pointer to the object of which the function acts as an "observably constant" member function for.

Alternatively, the first argument may be a "handle" to such an object, like an integer index into a global table of related objects or something similar.

In any case, the first function argument must uniquely identify somehow the object to be operated on.


The special case of "_c0"
-------------------------

Specifying a call attribute suffix of "_c0" means that this function follows CFA-specific semantics, but it neither registers any resources locally nor is it a "mutably constant" member function nor will it raise an error.

Such a function must then be a "cannot fail"-function, which will always achieve its documented purpose and return a valid result (unless it is a `void` function).

If a function may fail and return a special return code which the client should check, then this is not a CFA-function and should thus not have any "_c"-suffix at all.


Functions registering resources non-locally
-------------------------------------------

This only applies to environments where a framework for collecting and later automatic freeing of resources using some sort of resource registry is available and in effect.

In such environments, this call attribute documents that a function will also register the resources it has allocated with the beforementioned registry rather than just allocating them.

This specification does not dictate a particular way how resource registries have to be implemented. Depending on the implementation, a resource registry reference may be passed as an argument to the function, or it may be a static, global or thread-local variable.

Actually, this call attribute is rather a generalized an ownership-transfer attribute, because it transfers ownership of some resources to the resource registry.

However, unlike real ownership-transfer attributes, this call atribute does not specify exactly the ownership of which resource will be transfered to the registry.

This needs to be documented separately, unless the following default assumption applies: The registered resource is also returned as the primary return value, if it is a suitable resource reference. Otherwise, the first argument of the function must be an "out"-argument for obtaining such a resource reference.
